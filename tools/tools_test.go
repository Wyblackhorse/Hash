/**
 * @Author $
 * @Description //TODO $
 * @Date $ $
 * @Param $
 * @return $
 **/
package tools

import (
	"encoding/json"
	"fmt"
	_ "fmt"
	"github.com/wangyi/MgHash/util"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"testing"
)


type AutoGenerated struct {
	Data []struct {
		Ret []struct {
			ContractRet string `json:"contractRet"`
			Fee int `json:"fee"`
		} `json:"ret"`
		Signature []string `json:"signature"`
		TxID string `json:"txID"`
		NetUsage int `json:"net_usage"`
		RawDataHex string `json:"raw_data_hex"`
		NetFee int `json:"net_fee"`
		EnergyUsage int `json:"energy_usage"`
		BlockNumber int `json:"blockNumber"`
		BlockTimestamp int64 `json:"block_timestamp"`
		EnergyFee int `json:"energy_fee"`
		EnergyUsageTotal int `json:"energy_usage_total"`
		RawData struct {
			Contract []struct {
				Parameter struct {
					Value struct {
						Amount int `json:"amount"`
						OwnerAddress string `json:"owner_address"`
						ToAddress string `json:"to_address"`
					} `json:"value"`
					TypeURL string `json:"type_url"`
				} `json:"parameter"`
				Type string `json:"type"`
			} `json:"contract"`
			RefBlockBytes string `json:"ref_block_bytes"`
			RefBlockHash string `json:"ref_block_hash"`
			Expiration int64 `json:"expiration"`
			Timestamp int64 `json:"timestamp"`
		} `json:"raw_data"`
		InternalTransactions []interface{} `json:"internal_transactions"`
	} `json:"data"`
	Success bool `json:"success"`
	Meta struct {
		At int64 `json:"at"`
		Fingerprint string `json:"fingerprint"`
		Links struct {
			Next string `json:"next"`
		} `json:"links"`
		PageSize int `json:"page_size"`
	} `json:"meta"`
}

func TestOne(t *testing.T) {
	url := "https://api.trongrid.io/v1/accounts/TMHcsLnzt6TW1eBMUyfeXcfiCYAWnD6666/transactions?only_to=true&limit=200"
	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Add("Accept", "application/json")
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)
	var data AutoGenerated
	jsonErr := json.Unmarshal(body, &data)
	if jsonErr == nil {
		if len(data.Data)>0 {
			for _, v := range data.Data {

				if v.RawData.Contract[0].Type=="TransferContract"  || v.RawData.Contract[0].Type=="TransferAssetContract"  {

				}
				fmt.Println(v.RawData.Contract[0].Type)
			}
		}
	}

}


func Hex2Dec(val string) int {
	n, err := strconv.ParseUint(val, 16, 32)
	if err != nil {
		fmt.Println(err)
	}
	return int(n)
}

func TestIsFileExist(t *testing.T) {


	fmt.Println(Hex2Dec("41f1beb2cb0d70e5d53bc23e96a536d1b0b2799a71"))
}


func TestGetRunPath2(t *testing.T) {

	url := "https://api.trongrid.io/wallet/gettransactioninfobyid"
	type GetTransactionInfoByIdParam struct {
		Value string `json:"value"`
	}
	var user GetTransactionInfoByIdParam
	user.Value = "20ae48ebe878647e3c8a2820a443b29f9695cfc44a734741bc0dfef5dc87b596"
	b, _ := json.Marshal(user)
	payload := strings.NewReader(string(b))
	req, _ := http.NewRequest("POST", url, payload)
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Content-Type", "application/json")
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)


	fmt.Println(string(body))
}

func TestInArray(t *testing.T) {
	url := "https://api.trongrid.io/wallet/getblockbynum"
	type GetBlockHashParam struct {
		Num int `json:"num"`
	}
	var param GetBlockHashParam
	param.Num=41444693
	b, _ := json.Marshal(param)
	payload := strings.NewReader(string(b))
	req, _ := http.NewRequest("POST", url, payload)
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Content-Type", "application/json")
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(string(body))
}
var b58Alphabet = []byte("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")


func TestIsFileNotExist(t *testing.T) {

	a:=100000000000

	fmt.Println(util.ToDecimal(strconv.Itoa(a), 6).Float64())

	//d:=address.HexToAddress("417c24cb47839d22c2822cb05682f0d8f9ab2bcea3")
	//fmt.Println(d.String())

}



